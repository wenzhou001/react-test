1.什么是webpack
webpack是一个模块打包工具,它可以识别所有模块引入方式,以及多种文件比如: js css less png 等

webpack-cli 的作用是,使我们可以在命令行,终端,使用命令行语句来操作webpack指令

模块引入方式:  
1. es moudule --- import XXX form './XXX.js'(导出export defalut XXX)
2. commonJS  var XXX = require('./XXX.js')  (导出 module.exports = XXX)
3. AMD 
//在引用时,先申明依赖
define(['jquery'],function($){
    var  backButton = $('.backToTop');
	return {
    	backButton
	};
});
4. CMD
//使用时,引入依赖
define(function(require, exports, module) {
	var a = require('./a') // 依赖可以就近
	a.data()
	var b = require('./b') 
	b.data()
})

产生的原因: 当前端业务越来越复杂,采用传统的面象过程的开发方式,单页面内容会特别长,不方便维护,所以现在了面象对象的开发
           将页面拆分成多个对象,多个组件化的方式,单个对象由对应的单个文件进行管理
           但是,对象越来越多时,会产生以下问题:
           1.文件变多,http页面请求变多,页面响应速度变慢
           2.不容易查错
           3.文件引入顺序不正确,会导致错误
传统做法:是在文件中将所有的关联的文件,都引用在当前文件index.js a.js b.js(index依赖a,a依赖b) 所以需要引用所有文件并且顺序不能错
解决方法: 如果a文件需要用到b文件,就在a文件中,引入b文件,在index中只需要引用a文件

index.js----
import a from 'a.js'

a.js----
import b from 'b.js'

(ES moudule 模块引入方式  import)

浏览器不能识明 import ,可以通过webpack 的编译,让浏览器,知道,import所要做的操作(引入文件)

采用es moudule的形式导入的模块(文件),必须也采用es moudule的导出形式,文件需要使用export defalut xxx进行导出


2.loader
webpack 不可识别的文件类型,则有loader来完成打包
通过webpack.config.js文件来进行规则配置

file-loader打包的原理 : 首先将文件,移动到dist文件下,再返回文件路径

url-loader打包原理: 将图片打包成 base64的字符串 插入在js文件中;
limit可以设置一个限制值,高与limit值,打包成图片文件,小于limit打包成字符串
这种方案可以避免,图片过大,过多时,使js文件变得很庞大,页面加载时,耗时过长,影响用户体验

style-loader 将打包后的css文件挂载到html中
css-loader 将css相互关联的css打包成一个css
sass-loader
less-loader 编译less,将less编译成浏览器可识别的css
postcss-loader 给样式加浏览器前缀 ( 需要用到autoprefixer这个插件来引入 )






